name: ci-cd

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release
    - name: Test
      run: dotnet test --no-build --verbosity normal

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: push to heroku
        env : 
            HEROKU_REGISTRY_URL: registry.heroku.com
            HEROKU_API_KEY : ${{ secrets.HEROKU_API_KEY }}
        run : |
            docker login --username=flan.zede@gmail.com --password $HEROKU_API_KEY $HEROKU_REGISTRY_URL
            export HEROKU_API_KEY=$HEROKU_API_KEY
            heroku container:login
            heroku container:push web --app sigrehapp
            heroku container:release web --app sigrehapp
            heroku ps:scale web=1 --app sigrehapp

      # - uses : actions-hub/docker/cli@master
      # - uses: actions-hub/docker/login@master
      #   env:
      #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      #     DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      #     DOCKER_REGISTRY_URL: docker.pkg.github.com

      # - name: Login to github registry
      #   uses: actions-hub/docker/login@master
      #   env:
      #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      #     DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      #     DOCKER_REGISTRY_URL: docker.pkg.github.com

      # - name : build docker image
      #   uses : actions-hub/docker/cli@master
      #   with :
      #     args : build -t docker.pkg.github.com/${{ github.repository }}/sigrehapp:0.1 .

      # - name: Push to github registry
      #   uses: actions-hub/docker@master
      #   with:
      #     args: push docker.pkg.github.com/${{ github.repository }}/sigrehapp:0.1    

      # - name : push to staging server with ssh
      #   env :
      #     SSHPASS : ${{ secrets.SSHPASS }}
      #     SERVER : ${{ secrets.SERVER}}
      #   run : |
      #     sudo apt-get update 
      #     sudo apt-get install sshpass -y
      #     npm install -g @angular/cli@6.2
      #     npm ci --debug
      #     ng build --prod
      #     cd dist/my-first-app/
      #     sudo sshpass  -p ${SSHPASS}   -v  ssh -o StrictHostKeyChecking=no root@${SERVER} 'rm -rf /usr/share/nginx/html/*'
      #     sudo sshpass -p ${SSHPASS} scp -v  -o stricthostkeychecking=no -r *.* root@${SERVER}:/usr/share/nginx/html
